@model SwiftAccountDetailsResponse
@using static NetSwiftClient.Demo.AspNetCore.Controllers.HomeController
@{
    Texts["Account.Title"] = "Account details";
    Texts["Account.Endpoint0"] = "Endpoint: {0}";
    Texts["Account.Objects0kBUsed1"] = "{0} objects ({1} kB used)";
    Texts["Account.Containers0"] = "{0} container(s)";
    Texts["Account.Containers"] = "Containers:";
    Texts["Container.Delete"] = "Delete";
    Texts["Container.ConfirmDelete"] = "Are you sure you want to delete this container?";
    Texts["Container.DeleteTip"] = "Container must be empty to be deleted";
    Texts["Container.Explore"] = "Open";
    Texts["Container.Objects0kBUsed1"] = "{0} objects ({1} kB used)";
    Texts["Container.LastModif0"] = "Last modified: {0}";
    Texts["Account.SetKey"] = "Set a new key";
    Texts["Account.NewKeyPrompt"] = "New key (empty to remove the key)";
    Texts["Account.NewKeyConfirm0"] = "New key: {0}";
    Texts["Info.AcceptRange0"] = "Accept-Range: {0}";
    Texts["Info.AllHeaders"] = "All headers";
    Texts["Account.AddContainer.Open"] = "Add new container";



    ViewData["Title"] = T("Account.Title");

    var token = TokenService.HasToken ? TokenService.Token : null;

    var accountUrl = Context.Request.GetQueryParameter("accountUrl");
    var setTempKey1Url = Url.RouteUrl(Routes.POST_SetTempKey_Route, new { accountUrl = accountUrl, number = 1 });
    var setTempKey2Url = Url.RouteUrl(Routes.POST_SetTempKey_Route, new { accountUrl = accountUrl, number = 2 });
    var newContainerUrl = Url.RouteUrl(Routes.PUT_ContainerAdd_Route, new { accountUrl });
}
<style>
    .account-containers {
        display: flex;
        flex-wrap: wrap;
        border: #ccc 1px solid;
        box-shadow: 0 0 14px rgba(0,0,0,0.06);
        padding: 0.5rem;
    }

        .account-containers .account-container {
            display: block;
            box-shadow: 0 0 14px rgba(0,0,0,0.06);
            padding: 0.5rem;
            margin: 0.3rem;
            position:relative;
        }

            .account-containers .account-container .container-name {
                font-weight: bold;
                word-break: break-all;
                hyphens: auto;
            }
            .account-containers .account-container:hover {
                /*transform: scale(1.015);*/
            }
                .account-containers .account-container .container-name:hover {
                    cursor: pointer;
                }

</style>
<div class="alert alert-warning" style="word-break: break-all;">
    <h6>@T("Account.Endpoint0", accountUrl)</h6>
    <div>@T("Account.Containers0", Model.ContentObject?.Count)</div>
    <div>@T("Account.Objects0kBUsed1", Model.ObjectCount, Model.BytesUsed / 1024)</div>
    <div>@T("Info.AcceptRange0", Model.AcceptRanges)</div>
    <br />
    <div style="display:flex; justify-content:space-between">
        <span>Temp key 1: @Model.TempKey </span><button class="btn btn-light btn-sm" data-url="@setTempKey1Url" onclick="NSC.setTempKey(this)">@T("Account.SetKey")</button>
    </div>
    <div style="display:flex; justify-content:space-between">
        <span>Temp key 2: @Model.TempKey2 </span><button class="btn btn-light btn-sm" data-url="@setTempKey2Url" onclick="NSC.setTempKey(this)">@T("Account.SetKey")</button>
    </div>
    <button style="align-self:flex-end" class="btn btn-link btn-sm" data-toggle="collapse" data-target="#all-headers" aria-expanded="true" aria-controls="all-headers">
        @T("Info.AllHeaders") <i class="fa fa-chevron-down"></i>
    </button>
    <div class="collapse" id="all-headers">
        <div style="display:flex;flex-direction:column">
            @foreach (var h in Model.Headers)
            {
                <div style="display:flex;width:100%;flex:1;border:#ccc 1px solid;padding:0.3rem;"><div style="flex:1">@h.Key</div><div style="flex:1;overflow-x:auto">@h.Value</div></div>

            }
        </div>
    </div>
</div>
<style>
    .account-add-container-form {
        border: #ccc 1px solid;
        box-shadow: 0 0 14px rgba(0,0,0,0.06);
        padding: 0.5rem;
    }
</style>
<div class="account-add-container">
    <div style="text-align:center">
        <button style="align-self:flex-end" class="btn btn-primary btn-sm" data-toggle="collapse" data-target="#add-container" aria-expanded="true" aria-controls="add-container">
            <i class="fa fa-plus"></i> @T("Account.AddContainer.Open") <i class="fa fa-chevron-down"></i>
        </button>
    </div>
    <div class="collapse" id="add-container">
        <div class="account-add-container-form">
            @await Html.PartialAsync("/Views/Explorer/_PutContainer.cshtml")
        </div>
    </div>
</div>
<h4>@T("Account.Containers")</h4>
<div class="account-containers">
    @foreach (var c in Model.ContentObject ?? new List<SwiftAccountDetailsResponse.ContainerObject>())
    {
        var containerUrl = Url.RouteUrl(Routes.GET_Explore_Route, new { accountUrl = accountUrl, container = c.Name });
        var containerDeleteUrl = Url.RouteUrl(Routes.DELETE_DeleteContainer_Route, new { accountUrl = accountUrl, container = c.Name });
    <div class="account-container" data-url="@containerUrl">
        <div class="btn-topright btn-context">
            <div class="dropdown">
                <div class="btn btn-light btn-sm" style="height:22px;" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fa fa-ellipsis-h" style="vertical-align:top"></i>
                </div>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="">
                    <a href="@containerUrl" class="dropdown-item">
                        <i class="fa fa-info" style="width:25px;font-size:14px;"></i> @T("Container.Explore")
                    </a>
                    <a href="#" data-url="@containerDeleteUrl" class="dropdown-item" onclick="NSC.deleteContainer(this)" data-toggle="tooltip" title="@((c.Count>0?T("Container.DeleteTip"):""))">
                        <i class="fa fa-trash" style="width:25px;font-size:14px;"></i> @T("Container.Delete")
                    </a>
                </div>
            </div>
        </div>
        <div class="container-name">@c.Name</div>
        <div>@T("Container.Objects0kBUsed1", c.Count, (c.Bytes / 1024))</div>
        <div>@T("Container.LastModif0", c.Last_modified)</div>
    </div>
    }
    <script>
        $('.account-container .container-name').click(function () { var elt = $(this).closest('.account-container'); var url = elt.attr('data-url'); NSC.goToUrl(url); })
    </script>
</div>
<script>

    NSC.Msg = NSC.Msg || {};
    NSC.Msg.NewKeyPrompt = '@T_JS("Account.NewKeyPrompt")';
    NSC.Msg.NewKeyConfirm = '@T_JS("Account.NewKeyConfirm0")';
    NSC.Msg.ConfirmDeleteContainer = '@T_JS("Container.ConfirmDelete")';


    NSC.setTempKey = function (eltHtml) {
        var elt = $(eltHtml);
        var url = elt.attr('data-url');
        var newKey = prompt(NSC.Msg.NewKeyPrompt);
        if (!confirm(NSC.Msg.NewKeyConfirm.format( newKey))) return;
        var handlers = {}; handlers.success = function () { NSC.refresh();}
        NSC.genericAjaxPost(url, { newKey: newKey }, handlers);
    }
    NSC.deleteContainer = function (eltHtml) {
        var elt = $(eltHtml);
        var url = elt.attr('data-url');
        if (!confirm(NSC.Msg.ConfirmDeleteContainer)) return;
        var handlers = {};
        handlers.success = function (res) { NSC.refresh(); }
        NSC.genericAjaxDelete(url, null, handlers);
    }

</script>