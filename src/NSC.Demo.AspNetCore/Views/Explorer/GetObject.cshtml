@model SwiftObjectGetResponse
@{
    Texts["Container.Title"] = "Container details";
    Texts["Account.Endpoint0"] = "Endpoint: {0}";
    Texts["Container.Container0"] = "Container: {0}";
    Texts["Container.Objects0kBUsed1"] = "{0} objects ({1} kB used)";
    Texts["Container.Objects"] = "Objects:";
    Texts["Object.kBUsed0"] = "{0} kB";
    Texts["Object.LastModif0"] = "Last modified: {0}";

    Texts["Object.DirectDownload"] = "Direct download";
    Texts["Object.AuthDownloadDwl"] = "Authorized Download";
    Texts["Object.AuthDownloadBrowser"] = "Authorized open in browser";
    Texts["Object.FileInfo"] = "File info";
    Texts["Object.TempLink1"] = "Get temporary link";
    Texts["Object.ValidityLengthMin"] = "Validity length in minutes";
    Texts["Object.PleaseValidNumMin"] = "Please enter a valid number of minutes (integer)";
    Texts["Object.YourLink"] = "Your link:";
    Texts["Info.AcceptRange0"] = "Accept-Range: {0}";
    Texts["Info.AllHeaders"] = "All headers";
    Texts["Object.FullUrl0"] = "Full URL: {0}";


    ViewData["Title"] = T("Container.Title");

    var token = TokenService.HasToken ? TokenService.Token : null;

    var accountUrl = Context.Request.GetQueryParameter("accountUrl");
    var container = Context.Request.GetQueryParameter("container");
    var objectName = Context.Request.GetQueryParameter("objectName");
    var c = Model;
    var backToAccountUrl = Url.RouteUrl(Routes.GET_Explore_Route, new { accountUrl = accountUrl });
    var backToContainerUrl = Url.RouteUrl(Routes.GET_Explore_Route, new { accountUrl = accountUrl , container=container});

    var o = Model;


    var objectExploreUrl = Url.RouteUrl(Routes.GET_Explore_Route, new { accountUrl = accountUrl, container = container, objectName = objectName });
    var objectDownloadUrlBrowser = Url.RouteUrl(Routes.GET_DownloadObject_Route, new { accountUrl = accountUrl, container = container, objectName = objectName, disposition = "inline" });
    var objectDownloadUrlDwl = Url.RouteUrl(Routes.GET_DownloadObject_Route, new { accountUrl = accountUrl, container = container, objectName = objectName, disposition = "attachment" });
    var objectDirectUrl = new UriBuilder(accountUrl + "/" + container + "/" + objectName);
    var tempLinkUrl = Url.RouteUrl(Routes.POST_TempLink_Route, new { accountUrl = accountUrl, container = container, objectName = objectName });
}
<style>
    .btn-topright {
        position: absolute;
        top: 0;
        right: 0;
        height: 22px;
        margin-right: 0 !important;
    }

    .container-objects {
        display: flex;
        border: #ccc 1px solid;
        box-shadow: 0 0 14px rgba(0,0,0,0.06);
        padding: 0.5rem;
    }

        .container-objects .container-object {
            position: relative;
            display: block;
            box-shadow: 0 0 14px rgba(0,0,0,0.06);
            padding: 0.5rem 0.5rem 0.5rem 0.5rem;
            margin: 0.3rem;
        }

            .container-objects .container-object .object-name {
                font-weight: bold;
            }

            .container-objects .container-object:hover {
                cursor: pointer;
                transform: scale(1.015);
            }
</style>
<div class="alert alert-warning" style="word-break: break-all;">
    <h6><a href="@backToAccountUrl">@T("Account.Endpoint0", accountUrl)</a></h6>
    <h6><a href="@backToContainerUrl">@T("Container.Container0", container)</a></h6>
    <div>@T("Object.FullUrl0", objectDirectUrl)</div>
    @*@T("Container.Objects0kBUsed1", c., c.BytesUsed / 1024)*@
    <div>@T("Info.AcceptRange0", c.AcceptRanges)</div>

    <button style="align-self:flex-end" class="btn btn-link btn-sm" data-toggle="collapse" data-target="#all-headers" aria-expanded="true" aria-controls="all-headers">
        @T("Info.AllHeaders") <i class="fa fa-chevron-down"></i>
    </button>
    <div class="collapse" id="all-headers">
        <div style="display:flex;flex-direction:column">
            @foreach (var h in Model.Headers)
            {
                <div style="display:flex;width:100%;flex:1;border:#ccc 1px solid;padding:0.3rem;"><div style="flex:1">@h.Key</div><div style="flex:1;overflow-x:auto">@h.Value</div></div>

            }
        </div>
    </div>

</div>
<div>
    <a href="@objectExploreUrl" class="dropdown-item">
        <i class="fa fa-info" style="width:25px;font-size:14px;"></i> @T("Object.FileInfo")
    </a>
    <a href="@objectDirectUrl" target="_blank" class="dropdown-item">
        <i class="fa fa-download" style="width:25px;font-size:14px;"></i> @T("Object.DirectDownload")
    </a>
    <a href="@objectDownloadUrlDwl" target="_blank" class="dropdown-item">
        <i class="fa fa-cloud-download-alt" style="width:25px;font-size:14px;"></i> @T("Object.AuthDownloadDwl")
    </a>
    <a href="@objectDownloadUrlBrowser" target="_blank" class="dropdown-item">
        <i class="fa fa-cloud-download-alt" style="width:25px;font-size:14px;"></i> @T("Object.AuthDownloadBrowser")
    </a>
    <a href="#" class="dropdown-item" onclick="NSC.getTmpLink(this)" data-url="@tempLinkUrl">
        <i class="fa fa-clock" style="width:25px;font-size:14px;"></i> @T("Object.TempLink1")
    </a>

</div>
<script>
        NSC.Msg = NSC.Msg || {};
        NSC.Msg.NumberOfMinutes = '@T_JS("Object.ValidityLengthMin")';
        NSC.Msg.EnterValidValidity = '@T_JS("Object.PleaseValidNumMin")';
        NSC.Msg.YourLink = '@T_JS("Object.YourLink")';

        NSC.getTmpLink = function (eltHtml) {
            var elt = $(eltHtml);
            var url = elt.attr('data-url');
            var time = prompt(NSC.Msg.NumberOfMinutes);
            if (!time || !parseInt(time)) { NSC.notif(NSC.Msg.EnterValidValidity); return; }
            var data = { validityMinutes: parseInt(time) };
            var handlers = {};
            handlers.success = function (res) { prompt(NSC.Msg.YourLink, res.link) }
            NSC.genericAjaxPost(url, data, handlers);
        }

</script>
