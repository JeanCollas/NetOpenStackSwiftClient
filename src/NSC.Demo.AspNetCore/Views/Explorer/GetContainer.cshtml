@model SwiftContainerInfoResponse
@{
    Texts["Container.Title"] = "Container details";
    Texts["Account.Endpoint0"] = "Endpoint: {0}";
    Texts["Container.Container0"] = "Container: {0}";
    Texts["Container.Objects0kBUsed1"] = "{0} objects ({1} kB used)";
    Texts["Container.Objects"] = "Objects:";
    Texts["Object.kBUsed0"] = "{0} kB";
    Texts["Object.LastModif0"] = "Last modified: {0}";
    Texts["Object.DirectDownload"] = "Direct download";
    Texts["Object.AuthDownloadDwl"] = "Authorized Download";
    Texts["Object.AuthDownloadBrowser"] = "Authorized open in browser";
    Texts["Object.FileInfo"] = "File info";
    Texts["Object.TempLink1"] = "Get temporary link";
    Texts["Object.ValidityLengthMin"] = "Validity length in minutes";
    Texts["Object.PleaseValidNumMin"] = "Please enter a valid number of minutes (integer)";
    Texts["Object.YourLink"] = "Your link:";

    ViewData["Title"] = T("Container.Title");

    var token = TokenService.HasToken ? TokenService.Token : null;

    var accountUrl = Context.Request.GetQueryParameter("accountUrl");
    var container = Context.Request.GetQueryParameter("container");
    var c = Model;
    var backToAccountUrl = Url.RouteUrl(Routes.GET_Explore_Route, new { accountUrl = accountUrl });
}
<style>
    .btn-topright {
        position: absolute;
        top: 0;
        right: 0;
        height: 22px;
        margin-right: 0 !important;
    }
    .container-objects {
        display: flex;
        border: #ccc 1px solid;
        box-shadow: 0 0 14px rgba(0,0,0,0.06);
        padding: 0.5rem;
    }

        .container-objects .container-object {
            position: relative;
            display: block;
            box-shadow: 0 0 14px rgba(0,0,0,0.06);
            padding: 0.5rem;
            margin: 0.3rem;
        }

            .container-objects .container-object .object-name {
                font-weight: bold;
            }

            .container-objects .container-object:hover {
                cursor: pointer;
                transform: scale(1.015);
            }
</style>
<div class="alert alert-warning">
    <h6><a href="@backToAccountUrl">@T("Account.Endpoint0", accountUrl)</a></h6>
    <h6>@T("Container.Container0", container)</h6>
    @T("Container.Objects0kBUsed1", c.ObjectCount, c.BytesUsed / 1024)
    @c.ContainerName
    @c.AcceptRanges
</div>
<h4>@T("Container.Objects")</h4>
<div class="container-objects">
    @foreach (var o in Model.ContentObject ?? new List<SwiftContainerInfoResponse.ContainerFileObject>())
    {
        var objectExploreUrl = Url.RouteUrl(Routes.GET_Explore_Route, new { accountUrl = accountUrl, container = container, objectName = o.Name });
        var objectDownloadUrlBrowser = Url.RouteUrl(Routes.GET_DownloadObject_Route, new { accountUrl = accountUrl, container = container, objectName = o.Name , disposition="inline"});
        var objectDownloadUrlDwl = Url.RouteUrl(Routes.GET_DownloadObject_Route, new { accountUrl = accountUrl, container = container, objectName= o.Name, disposition = "attachment" });
        var objectDirectUrl = new UriBuilder(accountUrl +"/"+ container + "/" + o.Name );
        var tempLinkUrl = Url.RouteUrl(Routes.POST_TempLink_Route, new { accountUrl = accountUrl, container = container, objectName = o.Name });
    <div class="container-object" data-url="@objectExploreUrl ">
        <div class="btn-topright">
            <div class="dropdown">
                <div class="btn btn-light btn-sm" style="height:22px;" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fa fa-ellipsis-h" style="vertical-align:top"></i>
                </div>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="">
                    <a href="@objectExploreUrl" class="dropdown-item">
                        <i class="fa fa-info" style="width:25px;font-size:14px;"></i> @T("Object.FileInfo")
                    </a>
                    <a href="@objectDirectUrl" target="_blank" class="dropdown-item">
                        <i class="fa fa-download" style="width:25px;font-size:14px;"></i> @T("Object.DirectDownload")
                    </a>
                    <a href="@objectDownloadUrlDwl" target="_blank" class="dropdown-item">
                        <i class="fa fa-cloud-download-alt" style="width:25px;font-size:14px;"></i> @T("Object.AuthDownloadDwl")
                    </a>
                    <a href="@objectDownloadUrlBrowser" target="_blank" class="dropdown-item">
                        <i class="fa fa-cloud-download-alt" style="width:25px;font-size:14px;"></i> @T("Object.AuthDownloadBrowser")
                    </a>
                    <a href="#" class="dropdown-item" onclick="NSC.getTmpLink(this)" data-url="@tempLinkUrl">
                        <i class="fa fa-clock" style="width:25px;font-size:14px;"></i> @T("Object.TempLink1")
                    </a>
                </div>
            </div>
        </div>
@*        <button class="btn btn-sm btn-light btn-topright"><i class="fa fa-ellipsis-h" style="vertical-align:top"></i></button>*@
        <div class="object-name">@o.Name</div>
        <div>@T("Object.kBUsed0", (o.Bytes / 1024))</div>
        <div>@T("Object.LastModif0", o.Last_modified)</div>
    </div>
    }
    <script>
        NSC.Msg = NSC.Msg || {};
        NSC.Msg.NumberOfMinutes = '@T_JS("Object.ValidityLengthMin")';
        NSC.Msg.EnterValidValidity = '@T_JS("Object.PleaseValidNumMin")';
        NSC.Msg.YourLink = '@T_JS("Object.YourLink")';

        NSC.getTmpLink = function (eltHtml) {
            var elt = $(eltHtml);
            var url = elt.attr('data-url');
            var time = prompt(NSC.Msg.NumberOfMinutes);
            if (!time || !parseInt(time)) { NSC.notif(NSC.Msg.EnterValidValidity); return; }
            var data = { validityMinutes: parseInt(time) };
            var handlers = {};
            handlers.success = function (res) { prompt(NSC.Msg.YourLink, res.link) }
            NSC.genericAjaxPost(url, data, handlers);
        }

        $('.account-container').click(function () { var elt = $(this); var url = elt.attr('data-url'); NSC.goToUrl(url); })
    </script>
</div>